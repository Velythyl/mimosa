#!/bin/python3
# Mimosa
# Marc Feeley, Samuel Yvon
# Create the list of CPP files dependencies to include in the makefile
# The paths are not always straightforward but this tool understands them
# Usage:
# (from the dir of the project)
# ./utils/make-dependencies.py
import os
import re
import glob


def list_includes(path):
    regex = re.compile('"(.*)"', re.MULTILINE)
    with open(path, "r") as fh:
        lines = fh.readlines()
        for line in filter(lambda l: "#include" in str(l), lines):
            if "//#include" in line:
                continue

            matches = re.findall(regex, line)
            if len(matches) > 0:
                yield os.path.basename(matches[0])


def discover(extension):
    includes = {}
    for file in glob.glob(f"./**/*.{extension}", recursive=True):
        includes[os.path.basename(file)] = file.replace("./", "")
    return includes


def main():
    cpp = discover("cpp")
    header = discover("h")

    print("# Dependencies generated by make-dependencies.py")
    for file, path in filter(lambda f: "libc" not in f[1] and "gambit" not in f[1] and "attic" not in f[1],
                             cpp.items()):
        object_file = path.replace(".cpp", ".o")
        dependencies = [header[x] for x in list_includes(path) if x in header]

        print(f"{object_file}: {path} {' '.join(dependencies)}")

        pass


if __name__ == '__main__':
    main()
