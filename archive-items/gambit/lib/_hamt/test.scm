;;;============================================================================

;;; File: "test.scm"

;;; Copyright (c) 2018-2019 by Marc Feeley, All Rights Reserved.

;;;============================================================================

(import _hamt)
(import _test)

(check-false (hamt? 42))
(check-true (hamt? (make-hamt)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt?)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt? 1 2)))

(check-true (hamt? (make-hamt)))
(check-true (hamt? (make-hamt test: =)))
(check-true (hamt? (make-hamt hash: square)))
(check-true (hamt? (make-hamt test: = hash: square)))
(check-tail-exn type-exception? (lambda () (make-hamt test: 1)))
(check-tail-exn type-exception? (lambda () (make-hamt hash: 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (make-hamt 1)))

(check-equal? (hamt-length (make-hamt)) 0)
(check-equal? (hamt-length (hamt-set (make-hamt) 'a 5)) 1)
(check-equal? (hamt-length (hamt-set (hamt-set (make-hamt) 'a 5) 'b 9)) 2)
(check-tail-exn type-exception? (lambda () (hamt-length 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-length)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-length 1 2)))

(check-equal? (hamt-ref (hamt-set (make-hamt) 'a 5) 'a) 5)
(check-equal? (hamt-ref (hamt-set (make-hamt) 'a 5) 'a 3) 5)
(check-equal? (hamt-ref (make-hamt) 'a 3) 3)
(check-tail-exn type-exception? (lambda () (hamt-ref 1 'a)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-ref)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-ref 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-ref 1 2 3 4)))
(check-tail-exn unbound-key-exception? (lambda () (hamt-ref (make-hamt) 'a)))

(check-equal? (hamt-length (hamt-set (make-hamt) 'a 5)) 1)
(check-equal? (hamt-length (hamt-set (hamt-set (make-hamt) 'a 5) 'a 3)) 1)
(check-equal? (hamt-length (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3)) 2)
(check-equal? (hamt-length (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)) 3)
(check-equal? (hamt-length (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'a)) 1)
(check-tail-exn type-exception? (lambda () (hamt-set 1 'a 5)))
(check-tail-exn type-exception? (lambda () (hamt-set 1 'a)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-set)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-set 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-set 1 2 3 4)))

(check-equal? (hamt->list (hamt-merge (make-hamt) (make-hamt))) '())
(check-equal? (hamt->list (hamt-merge (hamt-set (make-hamt) 'a 5) (make-hamt))) '((a . 5)))
(check-equal? (hamt->list (hamt-merge (make-hamt) (hamt-set (make-hamt) 'a 5))) '((a . 5)))
(check-equal? (hamt->list (hamt-merge (hamt-set (make-hamt) 'a 5) (hamt-set (make-hamt) 'a 3))) '((a . 5)))
(check-equal? (hamt->list (hamt-merge (hamt-set (make-hamt) 'a 5) (hamt-set (make-hamt) 'a 3) #f)) '((a . 5)))
(check-equal? (hamt->list (hamt-merge (hamt-set (make-hamt) 'a 5) (hamt-set (make-hamt) 'a 3) #t)) '((a . 3)))
(check-tail-exn type-exception? (lambda () (hamt-merge 1 (make-hamt))))
(check-tail-exn type-exception? (lambda () (hamt-merge (make-hamt) 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-merge)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-merge 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-merge 1 2 3 4)))

(check-equal? (hamt-search (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)
                           (lambda (k v) (and (eq? k 'b) v)))
              3)
(check-equal? (hamt-search (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)
                           (lambda (k v) (and (eq? k 'z) v)))
              #f)
(check-tail-exn type-exception? (lambda () (hamt-search 1 pair?)))
(check-tail-exn type-exception? (lambda () (hamt-search (make-hamt) 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-search)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-search 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-search 1 2 3)))

(check-equal? (hamt-fold (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) (lambda (b k v) (+ b v)) 0) 9)
(check-tail-exn type-exception? (lambda () (hamt-fold 1 list 2)))
(check-tail-exn type-exception? (lambda () (hamt-fold (make-hamt) 1 2)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-fold)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-fold 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-fold 1 2)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-fold 1 2 3 4)))

(check-equal? (let ((sum 0))
                (hamt-for-each (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)
                               (lambda (k v) (set! sum (+ sum v))))
                sum)
              9)
(check-tail-exn type-exception? (lambda () (hamt-for-each 1 list)))
(check-tail-exn type-exception? (lambda () (hamt-for-each (make-hamt) 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-for-each)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-for-each 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-for-each 1 2 3)))

(check-equal? (hamt-map (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) list) '((a 5) (b 3) (c 1)))
(check-tail-exn type-exception? (lambda () (hamt-map 1 list)))
(check-tail-exn type-exception? (lambda () (hamt-map (make-hamt) 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-map)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-map 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-map 1 2 3)))

(check-equal? (hamt->list (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)) '((c . 1) (b . 3) (a . 5)))
(check-tail-exn type-exception? (lambda () (hamt->list 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt->list)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt->list 1 2)))

(check-equal? (list->hamt '((c . 1) (b . 3) (a . 5)))
              (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1))
(check-equal? (list->hamt '((c . 1) (b . 3) (a . 5)) test: eq?)
              (hamt-set (hamt-set (hamt-set (make-hamt test: eq?) 'a 5) 'b 3) 'c 1))
(check-equal? (list->hamt '((c . 1) (b . 3) (a . 5)) hash: symbol-hash)
              (hamt-set (hamt-set (hamt-set (make-hamt hash: symbol-hash) 'a 5) 'b 3) 'c 1))
(check-equal? (list->hamt '((c . 1) (b . 3) (a . 5)) test: eq? hash: symbol-hash)
              (hamt-set (hamt-set (hamt-set (make-hamt test: eq? hash: symbol-hash) 'a 5) 'b 3) 'c 1))
(check-tail-exn type-exception? (lambda () (list->hamt 1)))
(check-tail-exn type-exception? (lambda () (list->hamt '(1))))
(check-tail-exn type-exception? (lambda () (list->hamt '((a . 1) . b))))
(check-tail-exn type-exception? (lambda () (list->hamt '() test: 1)))
(check-tail-exn type-exception? (lambda () (list->hamt '() hash: 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (list->hamt)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (list->hamt 1 2)))

(check-true (hamt-empty? (make-hamt)))
(check-false (hamt-empty? (hamt-set (make-hamt) 'a 5)))
(check-tail-exn type-exception? (lambda () (hamt-empty? 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-empty?)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-empty? 1 2)))

(check-true (hamt-has-key? (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) 'b))
(check-false (hamt-has-key? (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) 'z))
(check-tail-exn type-exception? (lambda () (hamt-has-key? 1 'a)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-has-key?)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-has-key? 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-has-key? 1 2 3)))

(check-true (hamt-has-value? (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) 3))
(check-true (hamt-has-value? (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) 3 eq?))
(check-false (hamt-has-value? (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) 0))
(check-false (hamt-has-value? (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1) 0 =))
(check-tail-exn type-exception? (lambda () (hamt-has-value? 1 'a)))
(check-tail-exn type-exception? (lambda () (hamt-has-value? (make-hamt) 'a 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-has-value?)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-has-value? 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-has-value? 1 2 3 4)))

(check-equal? (hamt-keys (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)) '(a b c))
(check-tail-exn type-exception? (lambda () (hamt-keys 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-keys)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-keys 1 2)))

(check-equal? (hamt-values (hamt-set (hamt-set (hamt-set (make-hamt) 'a 5) 'b 3) 'c 1)) '(5 3 1))
(check-tail-exn type-exception? (lambda () (hamt-values 1)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-values)))
(check-tail-exn wrong-number-of-arguments-exception? (lambda () (hamt-values 1 2)))

;;;============================================================================
