// file: "fifo.h"

// Copyright (c) 2001 by Marc Feeley and Universit� de Montr�al, All
// Rights Reserved.
//
// Revision History
// 21 Oct 01  initial version (Marc Feeley)

#ifndef FIFO_H
#define FIFO_H

//-----------------------------------------------------------------------------

#include "general.h"
#include "chrono.h"
#include "thread.h"

//-----------------------------------------------------------------------------

// "fifo" class declaration.

class fifo
  {
  public:

    fifo ();
    virtual ~fifo ();

    ssize_t write_or_timeout (uint8* buf, size_t count, time timeout);
    ssize_t read_or_timeout (uint8* buf, size_t count, time timeout);

  protected:

    // The fifo is implemented with a fixed length array accessed as a
    // circular queue.  The "_lo" and "_hi" pointers delimit the section of
    // the array that contains bytes that can be read.  The "write"
    // operation adds bytes at the "_hi" end and the "read" operation
    // removes bytes from the "_lo" end.
    //
    //                0   1   2   3   4   5  ... N-5 N-4 N-3 N-2 N-1  N
    //              +---+---+---+---+---+---+---+---+---+---+---+---+---+
    //  _circularq  | E | F | G |   |   |   |   |   |   | A | B | C | D |
    //              +---+---+---+---+---+---+---+---+---+---+---+---+---+
    //                            ^                       ^
    //                            |                       |
    //                           _hi                     _lo

    static const int max_elements = 200; // N in the picture above

    uint8 _circularq[max_elements+1];
    volatile int _lo; // first byte that can be read
    volatile int _hi; // past last byte that was written

    mutex _m;          // to control access to the fifo's state
    condvar _read_cv;  // to block "read" operations that can't complete
    condvar _write_cv; // to block "write" operations that can't complete
  };

//-----------------------------------------------------------------------------

#endif

// Local Variables: //
// mode: C     //
// End: //
